---
import type { z } from "astro/zod";
import type statsSchema from "../schemas/stats-schema";
import { big_num_format, wiki_link } from "../utils";
import Alert from "./Alert.astro";
import { MaterialSymbolsArrowCoolDownRounded } from "./ClientIcons/Icons";
import MinMaxCard from "./MinMaxCard.astro";
import PathHistogram from "./PathHistogram";

const find_depth_for_percentage = (
    hist: { [k: string]: number },
    desired_percentage: number,
) => {
    let d: number | undefined = undefined;
    let actual_p = Object.entries(hist)
        .sort((a, b) => Number(a[0]) - Number(b[0]))
        .reduce((acc, [depth, percentage]) => {
            if (d === undefined) {
                acc += Number(percentage);
            }

            if (acc >= desired_percentage && d === undefined) {
                d = Number(depth);
                return acc;
            }
            return acc;
        }, 0);

    return [d, actual_p * 100];
};

const sum_hist = (start?: number, end?: number) => {
    let s = 0;
    for (
        let index = start ?? 1;
        index <= (end ?? Object.entries(hist).length);
        index++
    ) {
        const element = hist[index];
        s += Number(element);
    }
    return (s / sum) * 100;
};

interface Props {
    wiki_name: string;
    sample_stats: NonNullable<
        z.infer<typeof statsSchema>["bfs_sample_stats"]
    >[string];
}

const { wiki_name, sample_stats } = Astro.props;

const deepest_min = sample_stats["deep_stat"]["min"];
const deepest_avg = sample_stats["deep_stat"]["avg"];
const deepest_max = sample_stats["deep_stat"]["max"];

const visited_min = sample_stats["visit_stat"]["min"];
const visited_avg = sample_stats["visit_stat"]["avg"];
const visited_max = sample_stats["visit_stat"]["max"];

const hist = sample_stats["avg_depth_histogram"];
const depth_histogram = Object.fromEntries(
    Object.entries(hist).map(([key, value]) => [key, value.avg_occurences]),
);
const sum = Object.entries(hist).reduce(
    (acc, [_, entry]) => acc + Number(entry.avg_occurences),
    0,
);

const percent_90_max = find_depth_for_percentage(depth_histogram, 0.9);
---

<section>
    <h2 class="text-2xl flex items-center gap-2">
        Sampled <p class="text-base text-secondary">
            ({sample_stats["sample_size"]})
        </p>
    </h2>
    <div class="text-base text-secondary mb-3">
        <p>
            Following data was generated by doing a full <a
                href="https://en.wikipedia.org/wiki/Breadth-first_search">
                Breadth-first search (BFS)
            </a>
            starting from {sample_stats["sample_size"]} random pages.
        </p>
        <p>
            Histogramm data was calculated by adding the reached pages of {
                sample_stats["sample_size"]
            } samples dividing by the amount of all pages and then averaged.
        </p>
        <p>Seconds taken: {sample_stats.seconds_taken}</p>
    </div>

    <div class="flex flex-col gap-2 my-2">
        <MinMaxCard title="Deepest Page">
            <div slot="min">
                {big_num_format(deepest_min[1])}
                <div class="flex items-center gap-1 flex-wrap">
                    <a
                        href={wiki_link(deepest_min[0][0], wiki_name)}
                        class="text-base">
                        ({deepest_min[0][0]})
                    </a>
                    <span class="-rotate-90 block mx-1 w-5">
                        <MaterialSymbolsArrowCoolDownRounded
                            aria-label="dotted arrow pointing right"
                        />
                    </span>
                    <a
                        href={wiki_link(deepest_min[0][1], wiki_name)}
                        class="text-base">
                        ({deepest_min[0][1]})
                    </a>
                </div>
            </div>
            <div slot="avg">
                {deepest_avg.toFixed(2)}
            </div>
            <div slot="max">
                {big_num_format(deepest_max[1])}
                <div class="flex items-center gap-1 flex-wrap">
                    <a
                        href={wiki_link(deepest_max[0][0], wiki_name)}
                        class="text-base">
                        ({deepest_max[0][0]})
                    </a>
                    <span class="-rotate-90 block mx-1 w-5">
                        <MaterialSymbolsArrowCoolDownRounded
                            aria-label="dotted arrow pointing right"
                        />
                    </span>
                    <a
                        href={wiki_link(deepest_max[0][1], wiki_name)}
                        class="text-base">
                        ({deepest_max[0][1]})
                    </a>
                </div>
            </div>
        </MinMaxCard>

        <MinMaxCard title="Visited Pages">
            <div slot="min">
                {visited_min[1]}
                <a
                    href={wiki_link(visited_min[0], wiki_name)}
                    class="text-base">
                    ({visited_min[0]})
                </a>
            </div>
            <div slot="avg">
                {visited_avg.toFixed(2)}
            </div>
            <div slot="max">
                {big_num_format(visited_max[1])}
                <a
                    href={wiki_link(visited_max[0], wiki_name)}
                    class="text-base">
                    ({visited_max[0]})
                </a>
            </div>
        </MinMaxCard>

        <div class="my-1">
            <noscript>
                <Alert type="error">
                    Server side rendered graphs are currently not supported. You
                    have to enable javascript to see the histogram.
                </Alert>
            </noscript>

            <PathHistogram client:load depth_histogram={depth_histogram} />

            <div>
                {percent_90_max[1]?.toPrecision(3)}% of all articles are
                reachable by clicking {percent_90_max[0]} or less links.
            </div>
            <div>
                Total reachable pages: {big_num_format(Number(Math.ceil(sum)))}
            </div>
        </div>
    </div>
</section>
