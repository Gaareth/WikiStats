---
import type { z } from "astro/zod";
import type statsSchema from "../schemas/stats-schema";
import { big_num_format, wiki_link } from "../utils";
import Alert from "./Alert.astro";
import PathHistogram from "./Charts/PathHistogram";
import SkippedEntriesChart from "./Charts/SkippedEntriesChart";
import { MaterialSymbolsArrowCoolDownRounded } from "./ClientIcons/Icons";
import MinMaxCard from "./MinMaxCard.astro";

function make_cum(depth_histogram: { [k: string]: number }) {
    const cum: { [k: string]: number } = {};
    let accumulator = 0;

    const sortedKeys = Object.keys(depth_histogram)
        .map(Number)
        .sort((a, b) => a - b);

    for (const depth of sortedKeys) {
        accumulator += depth_histogram[depth];
        cum[depth] = accumulator;
    }

    return cum;
}

function find_depth_for_percentage(
    cumm_histogram: { [k: string]: number },
    targe_percentage: number,
):
    | {
          depth: number;
          percentage: number;
      }
    | undefined {
    if (targe_percentage <= 0 || targe_percentage > 1) {
        throw new Error(
            "Percentage must be between 0 and 1 (e.g., 0.9 for 90%)",
        );
    }

    const sortedDepths = Object.keys(cumm_histogram)
        .map(Number)
        .sort((a, b) => a - b);

    for (const depth of sortedDepths) {
        const cumm_p = cumm_histogram[depth];
        if (cumm_p >= targe_percentage) {
            return { depth, percentage: cumm_p };
        }
    }

    // Fallback (should not happen if data is valid)
    return undefined;
}

interface Props {
    wiki_name: string;
    sample_stats: NonNullable<
        z.infer<typeof statsSchema>["bfs_sample_stats"]
    >[string];
}

const { wiki_name, sample_stats } = Astro.props;

const deepest_min = sample_stats["deep_stat"]["min"];
const deepest_avg = sample_stats["deep_stat"]["avg"];
const deepest_max = sample_stats["deep_stat"]["max"];

const visited_min = sample_stats["visit_stat"]["min"];
const visited_avg = sample_stats["visit_stat"]["avg"];
const visited_max = sample_stats["visit_stat"]["max"];

const hist = sample_stats["avg_depth_histogram"];
const depth_histogram = Object.fromEntries(
    Object.entries(hist).map(([key, value]) => [key, value.avg_occurences]),
);

const cum_histogram = make_cum(depth_histogram);
const sortedDepths = Object.keys(cum_histogram)
    .map(Number)
    .sort((a, b) => a - b);

const percent_90_max = find_depth_for_percentage(cum_histogram, 0.9);
---

<section>
    <h2 class="text-2xl flex items-center gap-2">
        Sampled <p class="text-base text-secondary">
            ({sample_stats["sample_size"]})
        </p>
    </h2>
    <div class="text-base text-secondary mb-3">
        <p>
            Following data was generated by doing a full <a
                href="https://en.wikipedia.org/wiki/Breadth-first_search">
                Breadth-first search (BFS)
            </a>
            starting from {sample_stats["sample_size"]} random pages.
        </p>
        <p>
            Histogramm data was calculated by adding the reached pages of {
                sample_stats["sample_size"]
            } samples dividing by the amount of all pages and then averaged.
        </p>
        <p>Seconds taken: {sample_stats.seconds_taken}</p>
    </div>

    <div class="flex flex-col gap-2 my-2">
        <MinMaxCard title="Deepest Page">
            <div slot="min">
                {big_num_format(deepest_min[1])}
                <div class="flex items-center gap-1 flex-wrap justify-center">
                    <a
                        href={wiki_link(deepest_min[0][0], wiki_name)}
                        class="text-base break-all">
                        ({deepest_min[0][0]})
                    </a>
                    <span class="-rotate-90 block mx-1 w-5">
                        <MaterialSymbolsArrowCoolDownRounded
                            aria-label="dotted arrow pointing right"
                        />
                    </span>
                    <a
                        href={wiki_link(deepest_min[0][1], wiki_name)}
                        class="text-base break-all">
                        ({deepest_min[0][1]})
                    </a>
                </div>
            </div>
            <div slot="avg">
                {deepest_avg.toFixed(2)}
            </div>
            <div slot="max">
                {big_num_format(deepest_max[1])}
                <div class="flex items-center gap-1 flex-wrap justify-center">
                    <a
                        href={wiki_link(deepest_max[0][0], wiki_name)}
                        class="text-base break-all">
                        ({deepest_max[0][0]})
                    </a>
                    <span class="-rotate-90 block mx-1 w-5">
                        <MaterialSymbolsArrowCoolDownRounded
                            aria-label="dotted arrow pointing right"
                        />
                    </span>
                    <a
                        href={wiki_link(deepest_max[0][1], wiki_name)}
                        class="text-base break-all">
                        ({deepest_max[0][1]})
                    </a>
                </div>
            </div>
        </MinMaxCard>

        <MinMaxCard title="Visited Pages">
            <div slot="min">
                {big_num_format(visited_min[1])}
                <a
                    href={wiki_link(visited_min[0], wiki_name)}
                    class="text-base">
                    ({visited_min[0]})
                </a>
            </div>
            <div slot="avg">
                {visited_avg.toFixed(2)}
            </div>
            <div slot="max">
                {big_num_format(visited_max[1])}
                <a
                    href={wiki_link(visited_max[0], wiki_name)}
                    class="text-base">
                    ({visited_max[0]})
                </a>
            </div>
        </MinMaxCard>

        <div class="my-1">
            <noscript>
                <Alert type="error">
                    Server side rendered graphs are currently not supported. You
                    have to enable javascript to see the histogram.
                </Alert>
            </noscript>

            <PathHistogram client:load depth_histogram={depth_histogram} />

            <SkippedEntriesChart
                client:load
                dataset={cum_histogram}
                title="Cumulative Depth Histogram"
                description="Visualizes how depth values accumulate across the dataset"
                label="Cumulative Depth"
                chartType="line"
                sliceIdx={14}
                classNameWrapper="mt-10"
            />

            {
                percent_90_max && (
                    <div>
                        {percent_90_max.percentage?.toPrecision(3)}% of all
                        articles are reachable by clicking{" "}
                        {percent_90_max.depth} or less links.
                    </div>
                )
            }
        </div>
    </div>
</section>
