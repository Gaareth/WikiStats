---
import {
    get_supported_wikis,
    get_trend,
    MAX_NUM_LINKS_STAT,
    MAX_NUM_PAGES_STAT,
    MIN_NUM_LINKS_STAT,
    MIN_NUM_PAGES_STAT,
    NUM_DEAD_PAGES_STAT,
    NUM_LINKS_LOADED_STAT,
    NUM_PAGES_LOADED_STAT,
    NUM_ROOT_PAGES_STAT,
} from "../../../db/constants";
import { big_num_format, flattenGroupedData } from "../../../utils";
import Card from "../../Card";
import DatasetSelection from "../../Charts/DatasetSelection";
import Pill from "../../Pill";
import TrendPill from "../../TrendPill";

interface Props {
    dump_date: string;
}

const { dump_date } = Astro.props;

let datasets: Record<string, number[]> = {
    "Amount of pages": [],
    "Amount of links": [],
    "Amount of dead pages": [],
    "Amount of orphan pages": [],
};

const wikis = await get_supported_wikis(dump_date);
for (const w of wikis) {
    datasets["Amount of pages"].push(
        await NUM_PAGES_LOADED_STAT.get(dump_date, w),
    );
    datasets["Amount of links"].push(
        await NUM_LINKS_LOADED_STAT.get(dump_date, w),
    );
    datasets["Amount of dead pages"].push(
        await NUM_DEAD_PAGES_STAT.get(dump_date, w),
    );

    datasets["Amount of orphan pages"].push(
        await NUM_ROOT_PAGES_STAT.get(dump_date, w),
    );
}

const flattendDataset = flattenGroupedData(datasets);
const labeledDataset = flattendDataset.map((d) => ({
    ...d,
    labels: wikis,
}));

export function get_trend_from_all(all: any[]) {
    const current = all.at(-1);
    const prev = all.at(-2);

    return [current, get_trend(current[1], prev != null ? prev[1] : undefined)];
}

const max_num_pages_all = await MAX_NUM_PAGES_STAT.get_all_until(dump_date);
const [max_num_pages, max_num_pages_trend] =
    get_trend_from_all(max_num_pages_all);

const min_num_pages_all = await MIN_NUM_PAGES_STAT.get_all_until(dump_date);
const [min_num_pages, min_num_pages_trend] =
    get_trend_from_all(min_num_pages_all);

const max_num_links_all = await MAX_NUM_LINKS_STAT.get_all_until(dump_date);
const [max_num_links, max_num_links_trend] =
    get_trend_from_all(max_num_links_all);

const min_num_links_all = await MIN_NUM_LINKS_STAT.get_all_until(dump_date);
const [min_num_links, min_num_links_trend] =
    get_trend_from_all(min_num_links_all);

// transpose the dataset for better visualization, so all wikis are in one group and therefore easier to compare
const dataLength = Math.max(...flattendDataset.map((d) => d.data.length));
const transposedLabels = Object.keys(datasets);
const transposedDataset = Array.from({ length: dataLength }, (_, i) => ({
    label: wikis[i],
    data: flattendDataset.map((d) => d.data[i]),
    labels: transposedLabels,
}));
---

<div class="grid sm:grid-cols-2 lg:grid-cols-4 gap-2">
    <Card>
        <div class="flex justify-between">
            <p class="text-lg">Most pages</p>
            <Pill>{max_num_pages[0]}</Pill>
        </div>

        <div
            class="flex items-center gap-x-1 sm:gap-x-2 flex-wrap justify-center">
            <p class="font-bold mt-0.5">
                {big_num_format(max_num_pages[1])}
            </p>
            {
                max_num_pages_trend && (
                    <TrendPill trend={max_num_pages_trend} relative={true} />
                )
            }
        </div>
    </Card>

    <!-- <Stat title="Avg pages wiki" value={`${AVG_NUM_PAGES_STAT[0]}`} /> -->
    <Card>
        <div class="flex justify-between">
            <p class="text-lg">Min pages wiki</p>
            <Pill>{min_num_pages[0]}</Pill>
        </div>
        <div class="flex items-center gap-1 sm:gap-2 flex-wrap justify-center">
            <p class="font-bold mt-0.5">
                {big_num_format(min_num_pages[1])}
            </p>
            {
                min_num_pages_trend && (
                    <TrendPill trend={min_num_pages_trend} relative={true} />
                )
            }
        </div>
    </Card>

    <Card>
        <div class="flex justify-between">
            <p class="text-lg">Most links wiki</p>
            <Pill>{max_num_links[0]}</Pill>
        </div>
        <div class="flex items-center gap-1 sm:gap-2 flex-wrap justify-center">
            <p class="font-bold mt-0.5">
                {big_num_format(max_num_links[1])}
            </p>
            {
                max_num_links_trend && (
                    <TrendPill trend={max_num_links_trend} relative={true} />
                )
            }
        </div>
    </Card>

    <Card>
        <div class="flex justify-between">
            <p class="text-lg">Min links wiki</p>
            <Pill>{min_num_links[0]}</Pill>
        </div>
        <div class="flex items-center gap-1 sm:gap-2 flex-wrap justify-center">
            <p class="font-bold mt-0.5">
                {big_num_format(min_num_links[1])}
            </p>
            {
                min_num_links_trend && (
                    <TrendPill trend={min_num_links_trend} relative={true} />
                )
            }
        </div>
    </Card>
</div>
<!-- 
datasets={[
    [flattendDataset[0], flattendDataset[1]],
    [flattendDataset[2], flattendDataset[3]],
]} -->
<div class="my-10 mb-40 sm:mb-10 h-[400px]">
    <DatasetSelection
        chartType="bar"
        datasets={[
            [labeledDataset[0]],
            [labeledDataset[1]],
            [labeledDataset[2]],
            [labeledDataset[3]],
            transposedDataset,
        ]}
        selectionLabels={[
            "pages",
            "links",
            "dead-ends",
            "orphans",
            "all log scale",
        ]}
        client:load
        height={350}
        chartOptionsAll={{}}
        chartOptions={[
            {},
            {},
            {},
            {},
            { scales: { y: { type: "logarithmic" } } },
        ]}
        title="Number of pages by category"
    />
</div>
