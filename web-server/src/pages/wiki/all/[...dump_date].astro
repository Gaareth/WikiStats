---
import { getCollection } from "astro:content";
import Card from "../../../components/Card";
import { Table } from "../../../components/Table";
import { WikiSizesTable } from "../../../components/WikiSizesTable";
import { get_stat } from "../../../db/constants";
import Layout from "../../../layouts/Layout.astro";
import { type SiteInfo, fetchSiteMatrix } from "../../../wiki-api";
import { cn } from "../../../utils";

export async function getStaticPaths() {
    const entries = await getCollection("stats");

    let params = [];

    for (const entry of entries) {
        params.push({
            params: { dump_date: entry.data.dump_date },
        });
    }

    // Global stats for latest
    if (entries.length > 0) {
        params.push({
            params: { dump_date: "latest" },
        });

        params.push({
            params: { dump_date: undefined },
        });
    }

    return params;
}

const { dump_date } = Astro.params;

const entry = await get_stat(dump_date || "latest");
const all_wiki_sizes = entry!.wiki_sizes;
const supported_wikis = entry!.wikis;

const wikis_columns = all_wiki_sizes.sizes;

const dbname_to_siteinfo = new Map<string, SiteInfo>();
const site_matrix = await fetchSiteMatrix();
for (const key in site_matrix) {
    if (!isNaN(Number(key))) {
        const data = site_matrix[key];
        for (const site of data.site) {
            dbname_to_siteinfo.set(site.dbname, {
                url: site.url,
                dbname: site.dbname,
                code: data.code,
                sitename: site.sitename,
                name: data.name,
                localname: data.localname,
            });
        }
    } else if (key === "specials") {
        for (const special_key in site_matrix.specials) {
            const site = site_matrix.specials[special_key];
            dbname_to_siteinfo.set(site.dbname, {
                url: site.url,
                dbname: site.dbname,
                code: site.code,
                sitename: site.sitename,
            });
        }
    }
}
---

<Layout title="WikiStats - All Wikis">
    <div>
        <div class="flex flex-wrap justify-between items-baseline">
            <h1 class="text-3xl">Wikis</h1>
            <p>
                Available ({all_wiki_sizes.sizes.length}) | Supported ({
                    supported_wikis.length
                })
            </p>
        </div>

        <p class="my-2 text-secondary">
            This table lists all available wikis at <a
                href="https://dumps.wikimedia.org">
                dumps.wikimedia.org
            </a> along with their sizes. You can filter by their type, but most interesting
            are probably the language wikis
        </p>

        <div
            class={cn(`flex flex-col items-center w-full w-[400px] gap-2 static min-[1800px]:fixed top-32 right-8`)}>
            <Table
                classNameWrapper="!text-base w-full"
                classNameCell="!px-3 !py-1.5"
                classNameHeader="!px-3 !py-1.5"
                title="Size Legend"
                client:load
                columns={[
                    {
                        key: "size",
                        label: "Size",
                        isSortable: false,
                    },
                    {
                        key: "desc",
                        label: "Description",
                        isSortable: false,
                    },
                ]}
                data={[
                    {
                        size: "Total",
                        desc: "All available sql.gz files (compressed)",
                    },
                    {
                        size: "Relevant",
                        desc: `Downloaded sql.gz files (compressed). These are currently the tables: [${all_wiki_sizes.tables.join(", ")}]`,
                    },
                    {
                        size: "Decompressed",
                        desc: "Total size after decompressing all",
                    },
                    {
                        size: "Processed",
                        desc: "Size of data after processing to a single sqlite file",
                    },
                ]}
            />
            <Card className="text-center p-2 w-full">
                Want another wiki supported? <a href="/about">Contact me</a>
            </Card>
        </div>

        <div class="mt-14">
            <WikiSizesTable
                {supported_wikis}
                {wikis_columns}
                {dump_date}
                {dbname_to_siteinfo}
                client:load
            />
        </div>
    </div>
</Layout>
