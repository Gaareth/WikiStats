---
import type { InferEntrySchema } from "astro:content";
import { getCollection } from "astro:content";
import { z } from "zod";
import { LineChart } from "../../../../components/Charts/LineChart";
import { WIKI_NAMES } from "../../../../db/constants";
import Layout from "../../../../layouts/Layout.astro";
import { flattenGroupedData, type KeysOfType } from "../../../../utils";

export async function getStaticPaths() {
    const wiki_names = WIKI_NAMES;
    // const wiki_params: { params: { wiki_name: string | undefined } }[] =
    //     wiki_names.map(({ name: wiki_name }) => {
    //         return { params: { wiki_name } };
    //     });

    const wiki_params: { params: { wiki_name: string | undefined } }[] = [];
    wiki_params.push({ params: { wiki_name: undefined } });

    return wiki_params;
}

interface Params {
    wiki_name: string | undefined;
}

const { wiki_name }: Params | undefined = Astro.params;

const all_stats = await getCollection("stats");

// console.log(all_stats);

const numberOrRecordSchema = z.record(z.number());

type RecordKeys = KeysOfType<InferEntrySchema<"stats">, Record<string, number>>;

let labels = all_stats.map((s) => s.id);
let chart_data: Record<RecordKeys, Record<string, number[]>> = {
    longest_name: {},
    // longest_name_no_redirect: {},
    num_dead_orphan_pages: {},
    num_dead_pages: {},
    num_linked_redirects: {},
    num_links: {},
    num_orphan_pages: {},
    num_pages: {},
    num_redirects: {},
};

for (const stat of all_stats) {
    const data = stat.data;
    const keys = Object.keys(data) as Array<RecordKeys>;

    for (const key of keys) {
        const values = data[key];
        // console.log("k", key, "v", value, data);

        // Validate the value with the Zod schema
        const result = numberOrRecordSchema.safeParse(values);

        if (result.success) {
            // @ts-ignore
            // let number_value: number = value[wiki_name ?? "global"];
            // console.log(value, number_value);

            for (const wiki_name of data.wikis) {
                // console.log(wiki_name);
                let value = values[wiki_name];
                // if (value == null) {
                //     continue
                // }
                // console.log(chart_data[key], key);

                if (!Object.hasOwn(chart_data[key], wiki_name)) {
                    chart_data[key][wiki_name] = [];
                }

                // console.log(key, "v", value);

                chart_data[key][wiki_name].push(value);
            }
        }
    }
}
// console.log(chart_data);
---

<Layout title="Stats History">
    <div>
        {all_stats.length} Datapoints

        <!-- <LineChart
            client:load
            {labels}
            datasets={transformData(chart_data["num_pages"])}
            title="Amount of total pages"
            height={250}
        /> -->

        {
            Object.entries(chart_data).map(
                ([title, data]) =>
                    Object.keys(data).length > 0 && (
                        <LineChart
                            client:load
                            {labels}
                            datasets={flattenGroupedData(data)}
                            {title}
                            height={250}
                        />
                    ),
            )
        }
    </div>
</Layout>
