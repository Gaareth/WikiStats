---
export const prerender = false;

import Layout from "../layouts/Layout.astro";

import {
    ErrorCircleIcon,
    LoadingSpinner,
    MaterialSymbolsCalendarClock,
    MaterialSymbolsDoneAllRounded,
} from "../components/ClientIcons/Icons";
import DBSchedule from "../components/SPC/db/DBSchedule.astro";
import FinishedTasks from "../components/Task/FinishedTasks.astro";
import RunningTasks from "../components/Task/RunningTasks.astro";
import { type TaskType } from "../components/Task/Task.astro";
import { redisClient } from "../db/redis";
import { cn } from "../utils";

let keys = await redisClient.hGetAll("CELERY-WIKI_wiki-tasks");
let tasks: TaskType[] = Object.entries(keys).map(([key, value]) => {
    let { name, status, startedAt, finishedAt, ...rest } = JSON.parse(value);
    return {
        name,
        status,
        startedAt: new Date(startedAt),
        finishedAt: finishedAt != null ? new Date(finishedAt) : undefined,
        ...rest,
    };
});

console.log(tasks);

// const tasksStatusi = await redisClient.hGetAll("CELERY-WIKI_wiki-tasks-status");

const sortTasks = (a: TaskType, b: TaskType) => {
    // -1 comes first
    if (a.status === "RUNNING" && b.status !== "RUNNING") {
        return -1;
    }
    if (a.status !== "RUNNING" && b.status === "RUNNING") {
        return 1;
    }

    if (a.dumpDate !== b.dumpDate) {
        return a.dumpDate > b.dumpDate ? -1 : 1; // most recent first
    }

    return b.startedAt.getTime() - a.startedAt.getTime();
};

let runningTasks = tasks.filter((t) => t.status == "RUNNING").sort(sortTasks);
let finishedTasks = tasks.filter((t) => t.status != "RUNNING").sort(sortTasks);

let now = new Date();

type DB_STATUS_TYPE = "DONE" | "RUNNING" | "SCHEDULED" | "FAILED";
let dbStatus: DB_STATUS_TYPE;

// const isUpdatingRn = Object.entries(tasksStatusi)
//     .map(([_, v]) => v)
//     .some((v) => v === "RUNNING");
const isUpdatingRn = tasks.some((t) => t.status === "RUNNING");
console.log("isUpdatingRn: ", isUpdatingRn);

if (isUpdatingRn) {
    dbStatus = "RUNNING";
} else {
    if (tasks.some((t) => t.status === "FAILED")) {
        dbStatus = "FAILED";
    } else {
        let lastTask = tasks
            .filter((t) => t.finishedAt != null)
            .sort(
                (t1, t2) => t1.finishedAt!.getTime() - t2.finishedAt!.getTime(),
            )[0];

        let ONE_DAY_MS = 24 * 60 * 60 * 1000;
        if (
            lastTask != null &&
            now.getTime() - lastTask.finishedAt!.getTime() <= ONE_DAY_MS
        ) {
            dbStatus = "DONE";
        } else {
            dbStatus = "SCHEDULED";
        }
    }
}
---

<Layout title="Dump progress">
    <main class="grid grid-cols-1 sm:grid-cols-10 gap-2">
        <div class="sm:col-span-6 lg:col-span-7">
            <div class="flex flex-wrap gap-1 mb-5">
                <h1 class="text-3xl">Database Status</h1>
                <div
                    class={cn(
                        "ml-auto flex gap-2 items-center dark-layer-2 rounded px-3 border uppercase",
                        dbStatus == "DONE" && "dark:border-green-300/20 border-green-400",
                        dbStatus == "FAILED" && "dark:border-red-400/20 border-red-500",
                    )}>
                    {
                        dbStatus == "RUNNING" && (
                            <>
                                IN PROGRESS
                                <span class="block w-4">
                                    <LoadingSpinner />
                                </span>
                            </>
                        )
                    }

                    {
                        dbStatus == "DONE" && (
                            <>
                                DONE
                                <span class="block w-5 text-green-400 dark:text-green-300">
                                    <MaterialSymbolsDoneAllRounded aria-label="two checkmarks" />
                                </span>
                            </>
                        )
                    }

                    {
                        dbStatus == "SCHEDULED" && (
                            <>
                                SCHEDULED
                                <span class="block w-5">
                                    <MaterialSymbolsCalendarClock aria-label="schedule" />
                                </span>
                            </>
                        )
                    }

                    {
                        dbStatus == "FAILED" && (
                            <>
                                FAILED
                                <span class="block w-5 text-red-500 dark:text-red-400">
                                    <ErrorCircleIcon aria-label="Failure" />
                                </span>
                            </>
                        )
                    }
                </div>
            </div>

            <div class="flex gap-1 flex-wrap justify-between mb-1">
                <span>
                    {runningTasks.length} Tasks Running | {finishedTasks.length}
                    Done
                </span>
            </div>
            {
                runningTasks.length == 0 && finishedTasks.length == 0 && (
                    <p class="text-secondary text-base">
                        No tasks have been run yet. You can check the
                        approximate database dump schedule on the right.
                    </p>
                )
            }

            <RunningTasks runningTasks={runningTasks} />
            <FinishedTasks finishedTasks={finishedTasks} />
        </div>

        <div class="sm:col-end-[-1] w-full sm:col-span-3 mt-5 sm:mt-0">
            <DBSchedule />
        </div>
    </main>
</Layout>
